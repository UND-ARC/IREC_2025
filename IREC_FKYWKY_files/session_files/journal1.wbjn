# encoding: utf-8
# 2025 R1
SetScriptVersion(Version="25.1.122")
template1 = GetTemplate(TemplateName="Fluid Flow with Fluent Meshing")
system1 = template1.CreateSystem()
geometry1 = system1.GetContainer(ComponentName="Geometry")
geometry1.SetFile(FilePath="C:/Users/Khaug/Documents/School/UND/Rocketry/2024-2025/IREC/Solid Rocket Model FKYWKY.step")
geometry1.Edit()
geometry1.Exit()
geometry1.Edit()
geometry1.Exit()
geometry1.SetFile(FilePath="C:/Users/Khaug/Documents/School/UND/Rocketry/2024-2025/IREC/Solid Rocket Model FKYWKY.step")
geometry1.Edit()
Save(Overwrite=True)
setup1 = system1.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(Precision="Double", EnvPath={}, RunParallel=True, NumberOfProcessorsMeshing=2, NumberOfProcessors=2))
tGridData1 = GetDataEntity("/Mesh/TGridData:TGridData")
tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=2))
mesh1 = system1.GetContainer(ComponentName="Mesh")
Fluent.Edit(Container=mesh1)
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
meshComponent1 = system1.GetComponent(Name="Mesh")
meshComponent1.Refresh()
setup1.SendCommand(Command="""/file/set-tui-version \"25.1\"
Graphics driver currently in use: dx11
(cx-gui-do cx-activate-tab-index \"NavigationPane*Frame1(TreeTab)\" 0)(cx-gui-do cx-activate-item \"Key Behavioral Changes*PanelButtons*PushButton1(OK)\")""")
setup1.SendCommand(Command='(%py-exec "preferences.General.StartupMessages.KeyBehavioralChangesMessage.set_state(True)")')
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.LengthUnit.set_state(r'm')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.AreaUnit.set_state(r'm^2')\")")
setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.VolumeUnit.set_state(r'm^3')\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Pointer*boxselect")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Solution)*PushButton1(Switch to Solution)")(cx-gui-do cx-activate-item "Question*Cancel")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].InsertNextTask(CommandName=r'ImportBodyOfInfluenceGeometry')\")")
setup1.SendCommand(Command="(%py-exec \"workflow.DeleteTasks(ListOfTasks=[r'Import Body of Influence Geometry'])\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Arguments.set_state({r'FileName': r'D:\\Rocketry\\IREC_2025\\IREC_FKYWKY_files\\dp0\\FFF\\DM\\FFF.agdb',r'ImportCadPreferences': {r'MaxFacetLength': 0,},r'LengthUnit': r'm',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Import Geometry'].Execute()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(cx-use-window-id 51)")
setup1.SendCommand(Command="(%py-exec \"meshing.Graphics.Bounds.Selection.set_state(r'origin-wall')\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOIControlName': r'proximity_1',r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Proximity',r'BOIFaceLabelList': [r'rocket'],r'BOIGrowthRate': 1.2,r'BOIZoneorLabel': r'label',})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(Arguments={r'v1': True,}, SetupTypeChanged=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(Arguments={r'v1': True,}, SetupTypeChanged=True)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Arguments.set_state({r'BoundaryLabelList': [r'outlet'],r'BoundaryLabelTypeList': [r'outflow'],r'OldBoundaryLabelList': [r'outlet'],r'OldBoundaryLabelTypeList': [r'pressure-outlet'],})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].Arguments.set_state({r'LocalPrismPreferences': {r'Continuous': r'Continuous',},})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].AddChildAndUpdate(DeferUpdate=False)\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Arguments.set_state({r'VolumeFill': r'polyhedra',})\")")
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(7.43604 -7.84573 2.57365) '(0 0 0) '(0.0497184 0.0625644 0.0473923) 0 0)(cx-use-window-id 51)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton1(  Check)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton1(  Check)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuCheck*Perform Mesh Check")(cx-gui-do cx-activate-item "Warning*OK")')
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton2(  Quality)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuQuality*Evaluate Surface Quality")')
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton2(  Quality)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton2(  Quality)")')
setup1.SendCommand(Command="(cx-use-window-id 51)(cx-use-window-id 51)")
setup1.SendCommand(Command="(%py-exec \"meshing.Graphics.Bounds.Selection.set_state(r'rocket-1737')\")")
setup1.SendCommand(Command="(cx-use-window-id 51)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Mesh)*PushButton1(  Check)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuCheck*Perform Mesh Check")(cx-gui-do cx-activate-item "Warning*OK")')
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command='(cx-use-window-id 51)(cx-use-window-id 51)(handle-key "control ??")(cx-use-window-id 51)(handle-key "control z")(cx-use-window-id 51)(handle-key "control z")(cx-use-window-id 51)(handle-key "control z")(cx-use-window-id 51)(handle-key "control z")(cx-use-window-id 51)(cx-use-window-id 51)')
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Arguments.set_state({r'VolumeFill': r'hexcore',r'VolumeFillControls': {r'MaxSize': 1.002950916879228,},r'VolumeMeshPreferences': {r'Avoid1_8Transition': r'no',r'QualityWarningLimit': 0.05,},})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Revert()\")")
setup1.SendCommand(Command="(newline)")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Arguments.set_state({r'VolumeFill': r'hexcore',r'VolumeFillControls': {r'HexMaxCellLength': 0.6143999999999999,r'HexMaxSize': 0.75,r'HexMinCellLength': 0.0003,r'MaxSize': 1.002950916879228,},r'VolumeMeshPreferences': {r'Avoid1_8Transition': r'no',r'QualityWarningLimit': 0.05,},})\")")
setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Revert()\")")
setup1.SendCommand(Command="(newline)")
Save(Overwrite=True)
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Save Project")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*FileMenu*Close Fluent")')
Save(Overwrite=True)
geometry1.Exit()
